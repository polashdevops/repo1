apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  labels:
    app: ace-app
  name: ace-app-pipeline
spec:
  failedBuildsHistoryLimit: 5
  nodeSelector: {}
  output: {}
  postCommit: {}
  resources: {}
  runPolicy: Serial
  source:
    type: None
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        pipeline {
        agent {
        node {
        label 'nodejs' 
          }
         }
        options { 
         timeout(time: 20, unit: 'MINUTES') 
        }
        stages {
        stage('build') {
        steps {
            script {
                openshift.withCluster() {
                    openshift.withProject() {
                        echo "Using project: ${openshift.project()}"
                        openshift.selector("bc", "ace-app-bc").startBuild("--wait")
                    }
                }
            }
         }
        }
        stage('deploy') {
         when {
          expression {
          openshift.withCluster() {
            return !openshift.selector('dc', 'ace-app').exists()
          }
          }
          }
         steps {
          script {
            openshift.withCluster() {
                openshift.withProject() {
                def created = openshift.newApp( "ace-app:latest", "--name=ace-app", "--env=LICENSE=accept")
                echo "new-app created ${created.count()} objects named: ${created.names()}"
                created.narrow('svc').expose("--name=ace-console","--port=7600")
                created.narrow('svc').expose("--name=ace-traffic","--port=7800")
                
                 
                }
            }
        }
        }
        }
        }
        }
    type: JenkinsPipeline
  successfulBuildsHistoryLimit: 5
  triggers: []